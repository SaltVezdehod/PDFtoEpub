import os
import logging
from pathlib import Path
from dotenv import load_dotenv
from aiogram import Bot, Dispatcher, F
from aiogram.types import Message, FSInputFile
from aiogram.filters import Command
import asyncio

load_dotenv()
print("‚úÖ –§–∞–π–ª .env –∑–∞–≥—Ä—É–∂–µ–Ω")

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

TEMP_DIR = Path(os.getenv("TEMP_DIR", "temp"))
TEMP_DIR.mkdir(exist_ok=True)

TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")
if not TOKEN:
    raise RuntimeError("TELEGRAM_BOT_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ .env")

bot = Bot(token=TOKEN)
dp = Dispatcher()

MAX_FILE_SIZE_MB = int(os.getenv("MAX_FILE_SIZE_MB", "20"))
MAX_FILE_SIZE = MAX_FILE_SIZE_MB * 1024 * 1024


def convert_pdf_to_epub(pdf_path: str) -> str:
    """–ó–∞–≥–ª—É—à–∫–∞ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ PDF -> EPUB"""
    epub_path = pdf_path.replace(".pdf", ".epub")
    with open(epub_path, "w", encoding="utf-8") as f:
        f.write("–ó–∞–≥–ª—É—à–∫–∞ EPUB —Ñ–∞–π–ª–∞")
    return epub_path


def cleanup_file(path: Path):
    try:
        if path.exists():
            path.unlink()
            logger.info(f"–£–¥–∞–ª—ë–Ω —Ñ–∞–π–ª: {path}")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Ñ–∞–π–ª–∞: {e}")


@dp.message(Command("start"))
async def cmd_start(message: Message):
    await message.answer(
        "ü§ñ *–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ PDF –≤ EPUB*\n\n"
        "üì± *–ö–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å:*\n"
        "1. –û—Ç–ø—Ä–∞–≤—å PDF-—Ñ–∞–π–ª\n"
        "2. –î–æ–∂–¥–∏—Å—å –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏\n"
        "3. –ü–æ–ª—É—á–∏ EPUB-—Ñ–∞–π–ª\n\n"
        "‚ö° *–ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä:* 20MB",
        parse_mode="Markdown"
    )


@dp.message(Command("help"))
async def cmd_help(message: Message):
    await message.answer(
        "üìã *–ö–æ–º–∞–Ω–¥—ã:*\n"
        "/start ‚Äî –Ω–∞—á–∞—Ç—å\n"
        "/help ‚Äî –ø–æ–º–æ—â—å\n\n"
        "üîß *–ö–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å:*\n"
        "‚Ä¢ –û—Ç–ø—Ä–∞–≤—å PDF-–¥–æ–∫—É–º–µ–Ω—Ç\n"
        "‚Ä¢ –ë–æ—Ç —Å–∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ—Ç –µ–≥–æ –≤ EPUB\n"
        "‚Ä¢ –ü–æ–ª—É—á–∏ –≥–æ—Ç–æ–≤—ã–π —Ñ–∞–π–ª",
        parse_mode="Markdown"
    )


@dp.message(F.document)
async def handle_document(message: Message):
    doc = message.document

    if doc.mime_type != "application/pdf":
        await message.answer("‚ùå –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è —Ç–æ–ª—å–∫–æ PDF-—Ñ–∞–π–ª—ã.")
        return

    if doc.file_size > MAX_FILE_SIZE:
        await message.answer(
            f"‚ùå –§–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π ({doc.file_size / 1024 / 1024:.1f}MB). "
            f"–ú–∞–∫—Å–∏–º—É–º: {MAX_FILE_SIZE_MB}MB"
        )
        return

    file_name = f"user_{message.from_user.id}_{doc.file_name}"
    file_path = TEMP_DIR / file_name

    try:
        await message.answer("‚¨áÔ∏è –°–∫–∞—á–∏–≤–∞—é —Ñ–∞–π–ª...")
        file = await bot.get_file(doc.file_id)
        await bot.download_file(file.file_path, destination=file_path)

        await message.answer("üîÑ –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É—é PDF –≤ EPUB...")
        epub_path = convert_pdf_to_epub(str(file_path))

        await message.answer("üì§ –û—Ç–ø—Ä–∞–≤–ª—è—é —Ä–µ–∑—É–ª—å—Ç–∞—Ç...")

        epub_file = FSInputFile(epub_path)
        await message.answer_document(epub_file, caption="‚úÖ EPUB-—Ñ–∞–π–ª –≥–æ—Ç–æ–≤!")

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞: {e}")
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞: {e}")

    finally:
        cleanup_file(file_path)
        if 'epub_path' in locals():
            cleanup_file(Path(epub_path))


@dp.message(F.content_type.in_({"text"}))
async def handle_text(message: Message):
    await message.answer(
        "üìÑ –û—Ç–ø—Ä–∞–≤—å—Ç–µ PDF-–¥–æ–∫—É–º–µ–Ω—Ç –¥–ª—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ –≤ EPUB.\n"
        "–ù–∞–ø–∏—à–∏—Ç–µ /help –¥–ª—è —Å–ø—Ä–∞–≤–∫–∏."
    )


async def main():
    logger.info("ü§ñ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    await dp.start_polling(bot)


if __name__ == "__main__":
    asyncio.run(main())
